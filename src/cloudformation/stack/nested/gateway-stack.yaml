AWSTemplateFormatVersion: 2010-09-09
Description: EchoFish Gateway

Parameters:
  ApiLambdaArn:
    Type: String
  LambdaRolePermissionsBoundary:
    Type: String
  StackPrefix:
    Type: String
  StageName:
    Default: api
    Type: String

Conditions:
  HasPermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - ""
          - !Ref LambdaRolePermissionsBoundary

Resources:

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - HasPermissionsBoundary
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${LambdaRolePermissionsBoundary}
          - AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Ref ApiLambdaArn
                Action:
                  - lambda:InvokeFunction

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${StackPrefix}-EchoFish-ApiGateway
      Body:
        openapi: 3.0.0
        info:
          title: echofish-api
          version: 1.0.0
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              responses: {}
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambdaArn}/invocations
                httpMethod: POST
                type: aws_proxy
                passthroughBehavior: when_no_match

  ApiGatewayDeplyment@timestamp@:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref StageName


Outputs:
  RestApiUrl:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}