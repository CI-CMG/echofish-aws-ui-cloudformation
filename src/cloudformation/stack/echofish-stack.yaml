AWSTemplateFormatVersion: 2010-09-09
Description: EchoFish Stack

Parameters:
  OutputBucketUserAccessKeyPsName:
    Type: String
  OutputBucketUserSecretAccessKeyPsName:
    Type: String
  DevOutputBucketUserAlias:
    Type: String
    Default: ""
  RawSourceBucket:
    Description: The NOAA NODD bucket where raw EK60 files are archived.
    Type: String
    Default: "noaa-wcsd-pds"
  RawSourceBucketRegion:
    Type: String
    Default: "us-east-1"
  OutputBucketName:
    Description: In PROD, the NOAA NODD bucket for Zarr store archives. In DEV a test bucket that overwrites this value.
    Type: String
    Default: "noaa-wcsd-zarr-pds"
  OutputBucketRegion:
    Description: The NOAA NODD bucket is in us-east-1. For DEV this is overwritten.
    Type: String
    Default: "us-east-1"
  CalibrationBucket:
    Type: String
    Description: Bucket where cruise-level calibration file exists.
    Default: "noaa-wcsd-pds-index"
  CalibrationFileKey:
    Type: String
    Description: Cruise-level calibration data provided by Chuck Anderson.
    Default: "calibrated_cruises.csv"
  StackPrefix:
    Description: A prefix that identifies this stack.
    Type: String
  DataManagerEmail:
    Description: The email which will receive final notification of the pipeline status.
    Type: String
    Default: "rudyklucik@noaa.gov"
# TODO: see if we can feed in a list of emails?
  RolePermissionsBoundary:
    Description: An optional permissions boundary to associate with roles.
    Type: String
    Default: ""
  LogRetentionInDays:
    Type: Number
    Default: 30

  LambdaConcurrency:
    Description: Used to control all lambda concurrency in the stack.
    Type: Number
    MinValue: 1
    Default: 20

  ### [Step 0] Indexing ###
  IndexingLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230828212128
  IndexingLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 5000
  IndexingLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900

  ### [Step 1] Cruise Splitter ###
  CruiseSplitterLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 1024
  CruiseSplitterLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 512
  CruiseSplitterLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 240
#  CruiseSplitterLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 2a] Raw to Zarr ###
  RawToZarrLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230831205745
  RawToZarrLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 10240
  RawToZarrLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 10240
  RawToZarrLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900
#  RawToZarrLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 2b] Raw to Zarr Error Handler ###
#  RawToZarrErrorLambdaMemorySize:
#    Type: Number
#    MinValue: 128
#    MaxValue: 10240
#    Default: 1024
#  RawToZarrErrorLambdaTimeout:
#    Type: Number
#    MinValue: 1
#    MaxValue: 900
#    Default: 240

  ### [Step 3] Zarr Cruise Accumulator ###
  ZarrCruiseAccumulatorLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 512  # TODO: can this be less?
  ZarrCruiseAccumulatorLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 512
  ZarrCruiseAccumulatorLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 240

  ### [Step 4] Create Empty Zarr Store ### # TODO: "CreateCruiseZarrStoreLambda"
  CreateEmptyZarrStoreLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230828232015
  CreateEmptyZarrStoreLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 4096
  CreateEmptyZarrStoreLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 512
  CreateEmptyZarrStoreLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900
  CreateEmptyZarrStoreLambdaConcurrency:
    Type: Number
    MinValue: 1
    Default: 3
#  CreateEmptyZarrStoreLambdaOverwriteExistingZarrStore:
#    Type: String
#    Default: "False"
#    AllowedValues:
#      - "False"
#      - "True"
#    Description: "For False, if a Zarr store already exists in the output bucket, dont overwrite it"

  ### [Step 5] Resample and Write to Zarr Store ###
  ResampleAndWriteToZarrStoreLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230829214247
  ResampleAndWriteToZarrStoreLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 2048
  ResampleAndWriteToZarrStoreLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 1024
  ResampleAndWriteToZarrStoreLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900
#  ResampleAndWriteToZarrStoreLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 6] Aggregator ###
  AggregatorLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230831204026
  AggregatorLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 128
  AggregatorLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 512
  AggregatorLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 30
  AggregatorLambdaConcurrency:
    Type: Number
    MinValue: 1
    Default: 1

  ### [Step 6] Generate MVT ###
  Zarr2MvtLambdaTimeout:
    Description: The timeout in seconds for the Zarr to MVT lambda
    Type: Number
    MinValue: 10
    MaxValue: 900
    Default: 900
  Zarr2MvtLambdaMemorySize:
    Description: The amount of memory for the Zarr to MVT lambda
    Type: Number
    MinValue: 256
    MaxValue: 10240
    Default: 4096
  MvtTracklineSplitMs:
    Description: The minimum milliseconds to split a trackline
    Type: Number
    MinValue: 0
    Default: 900000
  MvtBatchSize:
    Description: The maximum number of points to keep in memory when processing MVTs
    Type: Number
    MinValue: 10
    Default: 10000
  MvtTracklinePrecision:
    Description: The number of decimal points allowed when calculating MVTs
    Type: Number
    MinValue: 1
    Default: 5
  MvtMaxZoomLevel:
    Description: The maximum zoom level that MVTs are generated for
    Type: Number
    MinValue: 5
    Default: 10
  MvtTracklineMinSimplificationTolerance:
    Description: The minimum simplification tolerance when generating MVTs
    Type: Number
    Default: 0.00001
  MvtTracklineMaxSimplificationTolerance:
    Description: The maximum simplification tolerance when generating MVTs
    Type: Number
    Default: 0.01
  MvtUploadBuffers:
    Description: The maximum sets of batches to keep in memory when uploading MVTs
    Type: Number
    MinValue: 1
    Default: 2

Conditions:
  CruiseSplitterLambdaIsRelease:
    Fn::Equals:
      - @CruiseSplitterLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @CruiseSplitterLambda.version@
  ZarrCruiseAccumulatorLambdaIsRelease:
    Fn::Equals:
      - @ZarrCruiseAccumulatorLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @ZarrCruiseAccumulatorLambda.version@
  BucketDrainLambdaIsRelease:
    Fn::Equals:
      - @CruiseSplitterLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @CruiseSplitterLambda.version@
  CreateEmptyZarrStoreLambdaIsRelease:
    Fn::Equals:
      - @CreateEmptyZarrStoreLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @CreateEmptyZarrStoreLambda.version@
  Zarr2MvtLambdaIsRelease:
    Fn::Equals:
      - @Zarr2MvtLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @Zarr2MvtLambda.version@

Resources:
  DynamoDbStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/dynamo-db-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  MessagingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
        DataManagerEmail: !Ref DataManagerEmail
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/messaging-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  BucketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        PermissionsBoundary: !Ref RolePermissionsBoundary
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        BucketDrainLambdaVersion: !If [ BucketDrainLambdaIsRelease, @BucketDrainLambda.version@, @BucketDrainLambda.version@@dashTimestamp@ ]
        DevOutputBucketUserAlias: !Ref DevOutputBucketUserAlias
        OutputBucketName: !Ref OutputBucketName
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/bucket-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 0] Indexing ### This is convenience function, not related to pipeline
  IndexingLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref IndexingLambdaImageTag
        MemorySize: !Ref IndexingLambdaMemorySize
        Timeout: !Ref IndexingLambdaTimeout
        IndexTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.IndexTableName
        IndexTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.IndexTableArn
        RawSourceBucket: !Ref RawSourceBucket
        CalibrationBucket: !Ref CalibrationBucket
        CalibrationFileKey: !Ref CalibrationFileKey
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.IndexLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.IndexDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/indexing-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 1] Cruise Splitter ###
  CruiseSplitterLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [CruiseSplitterLambdaIsRelease, @CruiseSplitterLambda.version@, @CruiseSplitterLambda.version@@dashTimestamp@]
        MemorySize: !Ref CruiseSplitterLambdaMemorySize
        EphemeralStorageSize: !Ref CruiseSplitterLambdaEphemeralStorageSize
        Timeout: !Ref CruiseSplitterLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # CruiseSplitterLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        InputBucketName: !Ref RawSourceBucket
        InputBucketRegion: !Ref RawSourceBucketRegion
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CruiseSplitterLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CruiseSplitterDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/cruise-splitter-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 2a] Raw to Zarr ###
  RawToZarrLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref RawToZarrLambdaImageTag
        MemorySize: !Ref RawToZarrLambdaMemorySize
        EphemeralStorageSize: !Ref RawToZarrLambdaEphemeralStorageSize
        Timeout: !Ref RawToZarrLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        InputBucket: !Ref RawSourceBucket
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/raw-to-zarr-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ## [Step 2b] Raw to Zarr Error Handler ###
  # Note: this lambda catches failures from raw-to-zarr and processes them into queue
  RawToZarrErrorLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref RawToZarrLambdaImageTag
        MemorySize: !Ref RawToZarrLambdaMemorySize
        EphemeralStorageSize: !Ref RawToZarrLambdaEphemeralStorageSize
        Timeout: !Ref RawToZarrLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        InputBucket: !Ref RawSourceBucket
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/raw-to-zarr-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket


  ### [Step 2b] Raw to Zarr Error Handler ###
#  RawToZarrErrorLambdaStack:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      Parameters:
#        DeploymentBucketName:
#          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
#        RolePermissionsBoundary: !Ref RolePermissionsBoundary
#        Timeout: !Ref RawToZarrErrorLambdaTimeout
#        MaxConcurrency: !Ref LambdaConcurrency # RawToZarrErrorLambdaConcurrency
#        MemorySize: !Ref RawToZarrErrorLambdaMemorySize
#        LogRetentionInDays: !Ref LogRetentionInDays
#        Version: !If [ RawToZarrErrorLambdaIsRelease, @RawToZarrErrorLambda.version@, @RawToZarrErrorLambda.version@@dashTimestamp@ ]
#        FileInfoTableArn:
#          Fn::GetAtt:
#            - DynamoDbStack
#            - Outputs.FileInfoTableArn
#        FileInfoTableName:
#          Fn::GetAtt:
#            - DynamoDbStack
#            - Outputs.FileInfoTableName
#        TopicArn:
#          Fn::GetAtt:
#            - MessagingStack
#            - Outputs.RawToZarrDeadLetterTopicArn
#        AccumulatorTopicArn:
#          Fn::GetAtt:
#            - MessagingStack
#            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
#      TemplateURL:
#        Fn::Sub:
#          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/raw-to-zarr-error-stack.yaml
#          - DeploymentBucketName:
#              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 3] Zarr Cruise Accumulator ###
  ZarrCruiseAccumulatorLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        Timeout: !Ref ZarrCruiseAccumulatorLambdaTimeout
        MemorySize: !Ref ZarrCruiseAccumulatorLambdaMemorySize
        EphemeralStorageSize: !Ref ZarrCruiseAccumulatorLambdaEphemeralStorageSize
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [ ZarrCruiseAccumulatorLambdaIsRelease, @ZarrCruiseAccumulatorLambda.version@, @ZarrCruiseAccumulatorLambda.version@@dashTimestamp@ ]
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CreateEmptyZarrStoreLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorDeadLetterTopicArn  # TODO: why doesn't this point to the CreateEmptyZarrStoreDeadLetterTopicArn?
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/zarr-cruise-accumulator-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 4] Create Empty Zarr Store ###
  CreateEmptyZarrStoreLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
#        DeploymentBucketName:
#          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref CreateEmptyZarrStoreLambdaImageTag
        MemorySize: !Ref CreateEmptyZarrStoreLambdaMemorySize
        EphemeralStorageSize: !Ref CreateEmptyZarrStoreLambdaEphemeralStorageSize
        Timeout: !Ref CreateEmptyZarrStoreLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # RawToZarrErrorLambdaConcurrency
#        Version: !If [ CreateEmptyZarrStoreLambdaIsRelease, @CreateEmptyZarrStoreLambda.version@, @CreateEmptyZarrStoreLambda.version@@dashTimestamp@ ]
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        OutputBucket:  # TODO: change to "OutputBucketName"
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
#        OutputBucketRegion:
#          Fn::GetAtt:
#            - BucketStack
#            - Outputs.OutputBucketRegion
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CreateEmptyZarrStoreLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreLambdaTopicArn
        DeadLetterTopicArn: # TODO: why doesn't this have its own DLQ?
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/create-empty-zarr-store-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 5] Resample and Write to Zarr Store ###
  ResampleAndWriteToZarrStoreLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref ResampleAndWriteToZarrStoreLambdaImageTag
        MemorySize: !Ref ResampleAndWriteToZarrStoreLambdaMemorySize
        EphemeralStorageSize: !Ref ResampleAndWriteToZarrStoreLambdaEphemeralStorageSize
        Timeout: !Ref ResampleAndWriteToZarrStoreLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # ResampleAndWriteToZarrStoreLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ProcessingFinishedTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/resample-and-write-to-zarr-store-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 6] Aggregate and email ###
  AggregatorLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref AggregatorLambdaImageTag
        MemorySize: !Ref AggregatorLambdaMemorySize
        EphemeralStorageSize: !Ref AggregatorLambdaEphemeralStorageSize
        Timeout: !Ref AggregatorLambdaTimeout
        MaxConcurrency: !Ref AggregatorLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ProcessingFinishedTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.EmailDataManagerTopicArn # TODO: this
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ProcessingFinishedDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/aggregator-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket


  Zarr2MvtStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        MvtTracklineSplitMs: !Ref MvtTracklineSplitMs
        MvtBatchSize: !Ref MvtBatchSize
        MvtTracklinePrecision: !Ref MvtTracklinePrecision
        MvtMaxZoomLevel: !Ref MvtMaxZoomLevel
        MvtTracklineMinSimplificationTolerance: !Ref MvtTracklineMinSimplificationTolerance
        MvtTracklineMaxSimplificationTolerance: !Ref MvtTracklineMaxSimplificationTolerance
        MvtUploadBuffers: !Ref MvtUploadBuffers
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        LambdaRolePermissionsBoundary: !Ref RolePermissionsBoundary
        Zarr2MvtLambdaTimeout: !Ref Zarr2MvtLambdaTimeout
        Zarr2MvtLambdaMemorySize: !Ref Zarr2MvtLambdaMemorySize
        ZarrStoreBucketName:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [ Zarr2MvtLambdaIsRelease, @Zarr2MvtLambda.version@, @Zarr2MvtLambda.version@@dashTimestamp@ ]
        ZarrBucketRegion:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketRegion
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        MaxConcurrency: !Ref LambdaConcurrency
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ProcessingFinishedTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.Zarr2MvtDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/zarr2mvt-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket


  # https://github.com/CI-CMG/echofish-aws-cloudformation/blob/58096e7db908a47600f9df2204cefa1ff30642f0/echofish-aws-cloudformation/src/cloudformation/stack/dynamic/raw2zarr-ec2.yaml
#  EC2Instance:
#    Type: AWS::EC2::Instance
#    Metadata:
#      AWS::CloudFormation::Init:
#        configSets:
#          default:
#            - setup
#            - run
#        setup:
#          packages:
#            yum:
#              awslogs: [ ]
#              docker: [ ]
#          files:
#            '/docker.tar.gz':
#              source: !Sub s3://${DeploymentBucketName}/docker/echofish-aws-raw2zarr-${Version}-docker.tar.gz
#              mode: '000644'
#              owner: root
#              group: root
#            '/etc/awslogs/awscli.conf':
#              content: !Sub |
#                [default]
#                region = ${AWS::Region}
#                [plugins]
#                cwlogs = cwlogs
#              mode: '000644'
#              owner: root
#              group: root
#            '/etc/awslogs/awslogs.conf':
#              content: !Sub |
#                [general]
#                state_file = /var/lib/awslogs/agent-state
#                [/var/log/dmesg]
#                file = /var/log/dmesg
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/dmesg
#                log_group_name = ${EC2LogGroup}
#                [/var/log/messages]
#                datetime_format = %b %d %H:%M:%S
#                file = /var/log/messages
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/messages
#                log_group_name = ${EC2LogGroup}
#                [/var/log/secure]
#                datetime_format = %b %d %H:%M:%S
#                file = /var/log/secure
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/secure
#                log_group_name = ${EC2LogGroup}
#                [/var/log/cron]
#                datetime_format = %b %d %H:%M:%S
#                file = /var/log/cron
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cron
#                log_group_name = ${EC2LogGroup}
#                [/var/log/cfn-init.log]
#                datetime_format = %Y-%m-%d %H:%M:%S
#                file = /var/log/cfn-init.log
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-init.log
#                log_group_name = ${EC2LogGroup}
#                [/var/log/cfn-hup.log]
#                datetime_format = %Y-%m-%d %H:%M:%S
#                file = /var/log/cfn-hup.log
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-hup.log
#                log_group_name = ${EC2LogGroup}
#                [/var/log/cfn-init-cmd.log]
#                datetime_format = %Y-%m-%d %H:%M:%S
#                file = /var/log/cfn-init-cmd.log
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-init-cmd.log
#                log_group_name = ${EC2LogGroup}
#                [/var/log/cloud-init-output.log]
#                file = /var/log/cloud-init-output.log
#                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cloud-init-output.log
#                log_group_name = ${EC2LogGroup}
#                [/application/log/application.log]
#                file = /application/log/application.log
#                log_stream_name = ${AWS::StackName}/{instance_id}/application/log/application.log
#                log_group_name = ${EC2LogGroup}
#              mode: '000644'
#              owner: root
#              group: root
#            '/etc/cfn/cfn-hup.conf':
#              content: !Sub |
#                [main]
#                stack=${AWS::StackId}
#                region=${AWS::Region}
#                interval=1
#              mode: '000400'
#              owner: root
#              group: root
#            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
#              content: !Sub |
#                [cfn-auto-reloader-hook]
#                triggers=post.update
#                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
#                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=EC2Instance
#                runas=root
#            '/run.sh':
#              content: !Sub |
#                set -ex
#                docker load -i /docker.tar.gz
#                docker run -d \
#                  -v $HOME/.aws:/root/.aws \
#                  -e ECHOFISH_SQSARN \
#                  -e ECHOFISH_SOURCEBUCKET \
#                  -e ECHOFISH_TARGETBUCKET \
#                  -e ECHOFISH_ECHOPYPETIMEOUT \
#                  -e ECHOFISH_QUIETPERIODMS \
#                  -e ECHOFISH_STACKNAME \
#                  -e ECHOFISH_MAXCONCURRENTUPLOADSPERCONSUMER \
#                  -e ECHOFISH_CONCURRENTCONSUMERS \
#                  -v /application/log:/application/log \
#                  cirescmg/echofish-aws-raw2zarr:${Version}
#                while [ ${docker inspect -f {{.State.Health.Status}} mvtgen} != healthy ]
#                do
#                  sleep 2
#                done
#              mode: '000744'
#              owner: root
#              group: root
#          services:
#            sysvinit:
#              docker:
#                enabled: true
#                ensureRunning: true
#                packages:
#                  yum:
#                    - docker
#              awslogs:
#                enabled: true
#                ensureRunning: true
#                packages:
#                  yum:
#                    - awslogs
#                files:
#                  - '/etc/awslogs/awslogs.conf'
#                  - '/etc/awslogs/awscli.conf'
#              cfn-hup:
#                enabled: true
#                ensureRunning: true
#                files:
#                  - '/etc/cfn/cfn-hup.conf'
#                  - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
#        run:
#          commands:
#            "01":
#              env:
#                ECHOFISH_SQSARN: !Ref SQSARN
#                ECHOFISH_SOURCEBUCKET: !Ref SOURCEBUCKET
#                ECHOFISH_TARGETBUCKET: !Ref TARGETBUCKET
#                ECHOFISH_ECHOPYPETIMEOUT: !Ref ECHOPYPETIMEOUT
#                ECHOFISH_STACKNAME: !Ref AWS::StackName
#                ECHOFISH_QUIETPERIODMS: !Ref QUIETPERIODMS
#                ECHOFISH_MAXCONCURRENTUPLOADSPERCONSUMER: !Ref MAXCONCURRENTUPLOADSPERCONSUMER
#                ECHOFISH_CONCURRENTCONSUMERS: !Ref CONCURRENTCONSUMERS
#              command: /run.sh
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT10M
#    Properties:
#      EbsOptimized: false
#      IamInstanceProfile: !Ref EC2InstanceProfile
#      ImageId: !Ref ImageId
#      InstanceType: !Ref InstanceType
#      BlockDeviceMappings:
#        - DeviceName: /dev/xvda
#          Ebs:
#            DeleteOnTermination: true
#            VolumeSize: !Ref VolumeSizeGB
#            VolumeType: gp2
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash -x
#          # Use the line below to ensure the CloudFormation helper scripts are updated to the latest version
#          # Per: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
#          yum install -y aws-cfn-bootstrap
#          retVal=$?
#          if [ $retVal = 0 ]; then
#              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
#              retVal=$?
#          fi
#          /opt/aws/bin/cfn-signal -e $retVal --stack ${AWS::StackName} --region ${AWS::Region} --resource=EC2Instance


